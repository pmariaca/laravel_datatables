
#  insert into book_category (category_id,book_id, created_at, updated_at) values('1',1,'2023-10-27 22:05:38','2023-10-27 22:05:38')
# insert into books (name, description, published_at, created_at, updated_at) values('libro 1','ropa', '2023-10-27','2023-10-27 22:05:38','2023-10-27 22:05:38')
#insert into categories (title, created_at, updated_at) values('acampar','2023-10-27 22:05:38','2023-10-27 22:05:38')

==============================================
INSTALACION
---------------------------------------------
composer require laravel/ui
php artisan ui bootstrap             nop php ->>  php artisan ui bootstrap --auth

npm install bootstrap-icons --save-dev

npm install jquery

en resources/js/app.js
import jQuery from 'jquery';
window.$ = jQuery;
---------------------------------------------
now, import icon css on resources\sass\app.scss file as like the below code:
resources\sass\app.scss

/* Fonts */
@import url('https://fonts.bunny.net/css?family=Nunito');
/* Variables */
@import 'variables';
/* Bootstrap */
@import 'bootstrap/scss/bootstrap';
@import 'bootstrap-icons/font/bootstrap-icons.css';
---------------------------------------------

composer require yajra/laravel-datatables-oracle:"^10.3.1"

config/app.php and then add following service provider.
'providers' => [
    // ...
    Yajra\DataTables\DataTablesServiceProvider::class,
],
After completing the step above, use the following command to publish configuration & assets:
php artisan vendor:publish --tag=datatables

    <!-- Scripts -->
    @vite(['resources/sass/app.scss', 'resources/js/app.js'])     <=======
</head>

https://yajrabox.com/docs/laravel-datatables/10.0/quick-starter
composer require yajra/laravel-datatables
npm i laravel-datatables-vite --save-dev


npm install
npm run dev
npm ls <<====>   npm audit  -->>  npm audit fix
php artisan serve


resources/js/app.js

import './bootstrap';
import 'laravel-datatables-vite';

resources/sass/app.scss

// Fonts
@import url('https://fonts.bunny.net/css?family=Nunito');
 
// Variables
@import 'variables';
 
// Bootstrap
@import 'bootstrap/scss/bootstrap';
 
// DataTables
@import 'bootstrap-icons/font/bootstrap-icons.css';
@import "datatables.net-bs5/css/dataTables.bootstrap5.min.css";
@import "datatables.net-buttons-bs5/css/buttons.bootstrap5.min.css";
@import 'datatables.net-select-bs5/css/select.bootstrap5.css';


        <main class="py-4">
            @yield('content')
        </main>
    </div>
    @stack('scripts')
</body>
</html>
==============================================
CREAR MODELOS
---------------------------------------------
configurar .env

php artisan make:model Book -m
php artisan make:model Category -m
php artisan make:model BookCategory -m  <- OJO cambiar nombre archivo y tabla -> book_category y en modelo: protected $table = 'book_category';

configurar migraciones
php artisan migrate
==============================================
CREAR CONTROLADORES
---------------------------------------------

php artisan make:controller BookController --api --model=Book
php artisan make:controller CategoryController --api --model=Category


------------------------------
SQLSTATE[HY000]: General error: 1 no such table: book_categories (Connection: 
sqlite, SQL: insert into "book_categories" ("book_id", "category_id", "updated_at", "created_at") values (2, 8, 2023-11-03 20:44:01, 2023-11-03 20:44:01))'

borrar:
php artisan make:migration 2023_11_02_235254_create_book_categories_table

php artisan make:controller BookTblController --api --model=Book
php artisan datatables:make Book
php artisan make:controller PruebaController --resource
------------------------------------------------------
To create the symbolic link, you may use the storage:link Artisan command:
php artisan storage:link
====================================================

In this step, we will build css and js file. so, let's run following two commands:
instalar dependencias
npm (Node package manager), un repositorio online de JavaScript para paquetes de Node.js de código abierto.
 

--------------------------------
resources\view\welcome.blade.php

<!doctype html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- CSRF Token -->
    <meta name="csrf-token" content="{{ csrf_token() }}">
    <title>{{ config('app.name', 'Laravel') }}</title>
    <!-- Fonts -->
    <link rel="dns-prefetch" href="//fonts.bunny.net">
    <link href="https://fonts.bunny.net/css?family=Nunito" rel="stylesheet">
    <!-- Scripts -->
    @vite(['resources/sass/app.scss', 'resources/js/app.js'])     <=======
</head>

-----------------------------------------
<!doctype html>
<html>
<head>
    <!-- Scripts -->
    <script src="{{ asset('js/app.js') }}" defer></script>
    <!-- Styles -->
    <link href="{{ asset('css/app.css') }}" rel="stylesheet">
</head>
<body>
    <h1>This is example from ItSolutionStuff.com</h1>
</body>
</html>
------------------------------
instalar npm (Node Package Manager), el cual es el gestor de paquetes, módulos o librerías que nos proporciona Nodejs. Entonces, para instalar npm, es fundamental ejecutar el siguiente comando:
npm install
compilar archivos
npm run dev
=====================================================
https://yajrabox.com/docs/laravel-datatables/10.0/installation
https://laravel.com/docs/10.x/pagination#using-bootstrap
https://laravel.com/docs/10.x/vite#working-with-scripts

php artisan --version 
Laravel Framework 10.30.1
=======================================
npm uninstall

Este comando se utiliza para desinstalar un paquete.
npm init
El comando init se utiliza para inicializar un proyecto. Cuando ejecutas este comando, 
crea un archivo package.json.
Al ejecutar npm init, se te pedirá que proporciones cierta información sobre el proyecto
que estás inicializando. Esta información incluye el nombre del proyecto, el tipo de licencia, la versión, etc.

Para saltarte el proceso de proporcionar la información tú mismo, puedes simplemente 
ejecutar el comando npm init -y.

npm uninstall [package name]
start stop  update  <- en produccion, despues de run build

¿Qué son las Dependencias npm?
Cuando instalamos paquetes, se crea una carpeta node_modules en la que podemos ver otras carpetas, 
concretamente la carpeta de cada paquete y sus subcarpetas. Puede que te preguntes por qué están ahí 
esas otras carpetas si no las has instalado.
Pues bien, en tu archivo package.json, tus paquetes aparecen en la lista de dependencias porque tu 
proyecto «depende» de esos paquetes para poder trabajar.
Las carpetas adicionales creadas en tu carpeta node_modules son otros paquetes adicionales de los que 
dependen tus paquetes instalados para ofrecerte las mejores funcionalidades. Puedes comprobarlo 
fácilmente mirando el archivo package.json de un paquete instalado para ver sus dependencias.

===========================

